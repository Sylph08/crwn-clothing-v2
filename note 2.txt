react have some libraries to use in multi platform: web, mobile, desktop app...
there are 2 base libraries we need to import when working on a environment: React, react-dom (web), react-native(mobile)...

npx is a package runner tool that comes with npm 5.2+

npm vs yarn
Install dependencies from package.json: npm install == yarn
Install a package and add to package.json: npm install package --save == yarn add package
Install a devDependency to package.json: npm install package --save-dev == yarn add package --dev
Remove a dependency from package.json: npm uninstall package --save == yarn remove package
Upgrade a package to its latest version: npm update --save == yarn upgrade
Install a package globally: npm install package -g == yarn global add package

check local folder of a library: npm list lib_name
if that library was installed globally: npm list -g lib_name
remove global library: npm uninstall -g lib_name

npx vs mpn
npx auto installs all of required files needed (use latest version if we don't specific version) for command and executes it immediately, end then deletes it from the local file

<React.StrictMode> will give warnings if there are some codes inside this tag is deprecated (the React team doesn't support it anymore in the new version of React)

the 'build' folder will be created when we build our application and all there source codes in 'src' folder is placed in index.html

Babel and Webpack: optimize our app to run on browser.
Babel is make sure that all of our code gets built into a basic version of JS that can be understood by any browsers.
After we build our app, in build/static/js we can see many of chunk.js files. A chunk is essentially a contained portion of JavaScript code that is working together to actually represent a part of our application. Webpack break these js files into chunks so that when the user is trying to access the home page, he just gets the JavaScript related to the home page. If we wants to navigate to like another page, then I'm going to turn that other page into a new chunk and then send it to them when they need it. So Webpack is essentially modularized our code module being a chunk.

React component re-render in cases: quá trình re-render diễn ra từ component parent tới component child
Trong functional component, khi re-render, code của cả function đó sẽ đc chạy lại từ trên xuống dưới.
1. state obj change in memory => in class base component, use this.setState({key:value}) //its called shadow merge
In class component, the sequence of life cycle is: constructor (state initial) -> render() -> componentDidMount(). setState() -> render()
2. props of the component change

In class component, setState is a asynchronous call. To get setState synchronous, we can write setState like this:
this.setState(()=>{
	// update state
	return {key:value};
}, ()=>{
	// do something after state updated
	console.log(this.state);
})

Promise
callback hell => these callback functions are all asynchronous functions => We don't know when those functions will complete and we have to nest a bunch of other function calls inside of each other because each one depends on the result and the return of the previous one.
There are 2 types of result give back from a promise: resolve() and reject().
To get the result of resolve(), we use .then((data)=>{}) after a promise call
To get the result of reject(), we use .catch(data)=>{}) after a promise call

Async await
Async function have the same ability to promise. When using await, it will wait until the previous task complete and continue to the next line of code (similar to .then() of promise). If we want to catch some errors orcur when await code is executing, we can put it into a try-catch block (similar to .catch() of promise)

when we console log a obj, if that obj have a property with the underscore before its name (Ex: _targetInst), there is the kind of property added by React, and it is not for us to access. We shouldn't be accessing anything with an underscore

get value of onChange event: e.target.value

string interpolation: ``

'yarn upgrade react react-dom --latest' vs 'yarn upgrade react react-dom'
If current local version is 17:
'yarn upgrade react react-dom' will upgrade to the latest version of version 17, Ex: 17.8.5
'yarn upgrade react react-dom --latest' will upgrade to the latest version of package, Ex: 19.0.3

<React.StrictMode> in React 18 helps re-render everything so that it can catch any weird behaviors that might occur inside component, so that instead of rendering 1 time after setState, it will render twice. To distinguish between component render and <React.StrictMode> render, we can use GG extension React Developer Tools

Virtual DOM is a JavaScript representation of the real DOM tree.

SSH is like a unique fingerprint you generate for your computer in your terminal, which you then let your github account know about so it knows that requests from this computer using SSH (cloning/ pushing/ pulling) are safe to do.

To use SASS in react app, run 'yarn add sass'

'-lock' file (Ex: package-lock.json, yarn.lock) is generated by NPM or Yarn in order to determine for an application what version of all of dependencies are lock to in this project

Using react-router-dom
Put <App/> inside <BrowserRouter></BrowserRouter>
In App component, return <Routes> <Route path = '', element = {}/> </Routes>
To use nested route, we can do like this: <Route path = 'abc' element = {A}> <Route path = 'def' element = {B}/> </Route> and we can access B through '/abc/def'. And then, to decide the location of B inside A, we use <Outlet/> to represent for B
To determine the default child Route is choosen for <Outlet/> when we access the path of parent's Route, we replace <Route> property 'path' by 'index={true}'

box-sizing: border-box
When we set padding for an element, we expect that the padding is accounted for inside of actual width and height of that element (decrease the width and height of content). But the fact is that it will increase the total width and height of that element. To prevent that, we use box-sizing: border-box;
To apply a css for all element on page, we use:
* {
	box-sizing: border-box;
}

--------------------------------------------
Firebase

install: yarn add firebase or npm install firebase

in firestore there are 3 terms: collection, document, data.
Document like a record of a table, data like fields of a record, collection like a table of document

When login with Google, we will get a UID

--------------------------------------------
.filter((_, idx)=>{}) // use '_' to ignore the first argument, 'idx' is the index of element

<Route path=":category" element={<Category />} />
{/* ':category' is a parameter that can be accessed in Category component */}
And inside Category component, to access that parameter, we use useParams hook.

file '_redirects' is specify for netlify

property name is fired with property value when a event of a element occur

by default, any button in <form> have type = 'submit', to make it become a normal button, change type = 'button'

To make a element in the center of a page, we can use css 'margin: auto auto;'

--------------------------------------
Context

send data from parent -> child: pass props from a parent down to a child
send data from child -> parent: pass callback from a parent down to a child to get the data up to the parent

< .Provider> wrap around any other components that need access to the values

Re-run the component vs re-render the component
A component re-run in these cases: 
	it's state updates
	it's props changes 
	the context that component are using is updated
But if there is nothing change on the DOM of that component, it will NOT re-render.

If we have multiple components that are all listening to a context, and these components don't use the actual values return from that context to update JSX, React will only re-run that function components (all the component's code except return() funtion) but not re-render anything
-> it will lead to a performance problem if we have hundreds of components that are all listening to a context

Contexts with reducer:
	we use useReducer is when 1 update needs to modify multiple values in state
	flow of data: component send an action to reducer and reducer give values back to the component

--------------------------------------------
Redux

there are 2 types of state in React: component state ( managed by useState) and global state (managed by Redux Store because redux always wrap all of our application)

Redux được sinh ra và hoạt động trên 3 nguyên tắc chính:

Chỉ có một nguồn tin cậy duy nhất (Single source of truth): State của toàn bộ ứng được chứa trong một object tree nằm trong Store duy nhất.
Trạng thái chỉ được phép đọc (State is read-only): Cách duy nhất để thay đổi State của ứng dụng là dùng một Action (là 1 object mô tả những gì xảy ra)
Thay đổi được thực hiện với pure functions (Changes are made with pure functions): Với mỗi actions, bạn phải chỉ định cách store thay đổi bằng reducers.

To pull data from redux store to component, we use useSelector hook. useSelector runs every time that the state object has updated in the root reducer

Redux-Logger
Logger is a Middleware lies between action and reducer to log out the state before (the state is called prev state) and after (the state is called next state) reducer run. 

Redux flow
Component dispatch actions to Middleware -> Middleware log the actions -> Middleware send actions to the reducers -> Reducers updated 
case 1: -> the actions go to Saga -> Saga fire a new action -> action go to the middleware
case 2: -> reducers return the values to the root reducer -> the root reducer update state -> all the useSelector rerun to get new state back to the component -> component rerender if useSelector return a new value

Redux persist
Keep the state after we refresh tha page

Redux-Thunk
Redux-Thunk recerive action and then return function which can be dispatch to another middleware or dispatch to reducer
So what you want to do with thunk is essentially you want to figure out where in your code base you have asynchronous behavior that you can move into a action driven flow
Thunk recommends that you declare your thunk actions name with post-fix async

If we are using a spinner when loading a page, maybe we dont need to use redux persist on that page

Side effect
Side effect các bạn có thể hiểu đơn giản là các xử lý bất đồng bộ như là call API, sử dụng setTimeout, setInterval,…

Redux-Saga
Saga replace thunk, so you can use only 1

Generator function
Async Await is actually built on top of generators
declare a generator function: function*
Generator function is use when you want to establish multiple executions in function, you can control when you want to continue the execution in this function onwards. It as the ability to "pause" functions
We need to remember that whenever we see yield, our code is stopping at this point, even if it's asynchronous code
a yield only run if the previous yield is complete
all() is an effect that run everything inside and only complete when all of it is done
takeLatest() mean if you hear a bunch of the same action, give the latest one
call(): turn a function into an effect in saga
put() is similar to dispatch()

-------------------------------------------------------
Stripe and serverless function

Adding library: yarn add @stripe/stripe-js @stripe/react-stripe-js
Put <App> in <Elements stripe={stripePromise}>

.env file
Is a environment file that only our application has access to these file
In react app, any variable in .env start with REACT_APP_[variable_name]="[value]"
To call variable defined in .env, we use process.env.[variable_name]
You should add .env to .gitignore file, so it will not deploy to git and the netlify production won't have the variables inside of this files. So that, we need to manually add these variables in Site settings/ Build and deploy / Environment variables

Add netlify functions
In root folder, create folder with the name exactly is netlify/functions
yarn add stripe dotenv
netlify share the same .env and package.json file in local testing. When we deploy this .env file, we will add all the variables of this file manually into the environment of netlify

Netlify CLI allow us to build our entire project in the environment that netlify would, but doing it locally in your own computer
netlify login
netlify dev: spin up a development server and build our project in netlify, and netlify functions are also running
we need to pass appropiate value to the request to the netlify function
The input data for testing: 4242 4242 4242 4242 01/30 232 24242

margin-left: auto; // push the element to the right of the page

----------------------------------------------------------------
TypeScript

Union operator : '|', usually with 'type'

---------------------------------------------------------------
GraphQL

GraphQL is actually a replacement for Redux, we almost never use both GraphQL and Redux

yarn add @apollo/client graphql
apollo is a frontend client that allows us to make requests and receive response for GraphQL
a query is a request for data, a mutation is a request to modify (update, delete) or add data
The GraphQL server admin need to define to you explicitly what and how you can ask for the data
Caching in GraphQL is the query caching, not result caching

Redux vs GraphQL and Apollo
GraphQL is easy to use in React but it need to set up the server, because of that, the complexity will live in the backend GraphQL server

---------------------------------------------------------------
Optimize in React

How function declarations inside of a functional component work
Whenever you render or re-render a functional component, React is going to go through line by line of this entire function every single time. Hooks by nature are more optimized for this process, but not for variables you declare. If we declare a string variable, whenever this component renders or re-render and it hits the declared line, react is re initializing this variable with its string. With this variable casting, this is pretty performant, minimal and has very little cost.
But when you take something more complex like casting a function (const a = () => {}), this is definitely more expensive. Even with anonymous functions inside the return call, react is re initializing this function every re-render. And the reason why this is happening is because React doesn't know whether or not this is something that is brand new or it isn't brand new because it doesn't know if any of the scoped variables inside are referencing new values. React just operates in a way where it just behaves like regular JavaScript. I see a function definition I'm going to define and initialize the function. Generally speaking, this is not that costly.
But let's say you're working on an application and you have hundreds of components that are rendering on the page and each and every one of them is initializing a function every single time, and numerous of those are constantly re rendering. In that case, these little, little performance bumps may improve your actual overall performance.

useCallback
useCallback helps memorize the function, it will not re-initialize the function passed in the first param until any value inside the depedency array passed in the second param changes

useMemo
useMemo allows us to memorize the return value of a function, the fuction passed into the first param will not rerun until any value inside the depedency array passed in the second param changes

memo
Combine with React Dev Tool Profiler, it allows us to properly update the appropriate components and render the appropriate ones we want to target only when they need to be updated.

Code spliting: React lazy and react suspense
They are the ways that we can optimize how browser download the code that serving from our website

Code spliting
Currently, when we load the home page, it will download the bundle.js file which contains all the source code of our app. And this actions it not efficient bescause we just need the source code of home page only. To fix this, we can use code spliting.
By code splitting, we tell React and Webpack to split up our bundle into the appropriate quantities for the loading page.
To do this, we need to use a couple new concepts, the first are React Lazy and React suspense.

React lazy and react suspense
Both of these are required in order for us to do something known as dynamic imports. Dynamic imports is something that comes from modern JavaScript. When you do an import like "import Home from './routes/home/home.component';", this is a synchronous import, meaning that your JavaScript code is not going to run until all of these imports are successfully brought into this file.
With a dynamic import, It's kind of like an async await. The import will became like this: "const Home = lazy(() => import('./routes/home/home.component'));" //react will not render this until it's required.
And to use that lazy, we need to put the app <Routes> inside <Suspense>

@media have the higher order than regular selector

------------------------------------------------------------------
Progessive Web App (PWA)

Native app is the app work on a native platform like a mobile phone

PWA make web apps behave like mobile apps

PWA require HTTPS, service worker, manifest.json

<meta name="viewport" ...> help optimize the app for multiple devices

manifest.json help define how the app is going to launch and to look

In PWA, the service worker acts as a network proxy. The request come from Browser to Service worker, service worker check the data for the request in Cache Storage (in F12 -> Application -> Cache -> Cache Storage), if not exist, the request will come from service worker to the internet and the response will give back to Browser

In React v17 and greater, to add PWA automatically into the new project, we need to use: 'npx create-react-app my-app --template cra-template-pwa'
To add PWA to your current project, follow these steps:
1. In a new and separate directory from our current project, generate a new CRA react app with the service worker template: npx create-react-app my-app --template cra-template-pwa
2. Copy the service-worker.js and serviceWorkerRegistration.js file from the new created app and add it into our client/src directory.
3. Copy the all the "workbox-*" dependencies from the package.json file in the dependencies section and add it into our client folders package.json dependencies. Then re-install your packages using yarn or npm depending on whichever package manager you have been using up to this point!

-----------------------------------------------------------------
Testing

TDD (test driven development) is the idea of writing tests even before you actually write your application code so that you start writing code based on the tests that you provide.

3 main categories: 
Unit tests: test individual function or classes
Intergration tests: test how different pieces of code work together 
Automation tests: test in real scenarios on the browser by controlling the browser and making sure the expected bahavior on the web is correct.

Testing tool
- Testing library: give us the ability to use some function to write our tests (Jasmine, Jest, Mocha)
- Assertion library: a tool allow you to test the variables contain the expected value (Jasmine, Jest (.expect(), .equal()...), chai)
- Test runner: a tool allow us to run our test (Jasmine, Jest, Mocha, Karma). A test runner can run test in different environment
- Mock Spies and Stubbs: spies provide information about functions (how many times they are called, in what cases, by who), Stubbing replaces selected functions with a function to ensure that the expected behaviour happens and then mocks is kind of like faking a function or a behavior to test different parts of a process. There tools is good for integration tests (Jasmine, Jest (mock function in test API below), Sinon.js)
- Code coverage: shows us what percentage of the statements, the branches, the functions are covered with tests (istanbul, Jest (npm test -- --coverage))
Most of these libraries follow the idea of behavioral driven development (BDD), which is we describe what a function does and say what behavior we expect out of them.

Unit test
A pure function is a function that has no side effects like affecting another part of a program and always returns something based on an input. It is deterministic, meaning that you can put in the same input a million times and you'll still get the same output a million times the exact same way
Unit tests don't test the contract. The contract is the connection between things, ex: a contract between a server and a database, a contract between a function and another function

Intergration test
Integration tests are all about cross communication between different units of code (side effect)

Automation tests (UI tests)
It is a end-to-end testing, Automation tests are UI tests that are always running inside a browser or a browser like environment because they need to simulate user behavior in these environments such as clicking, typing, scrolling

Tests are meant for development. You're never going to ship your test libraries or your test code into production.

If  we add '--save-dev' when installing a package, in package.json file, it will be added to 'devDependencies' segment, not 'dependencies' like without '--save-dev'

Install Jest
-, npm i --save-dev jest
-, in package.json, add "test": "jest --watch *.js" in "scripts"
' --watch *.js' is optional means jest will run the test everytime we make the code changes and save it in .js file
-, 'npm test' to run the test
(Note: Jest are now included in react-scripts when using npx create-react-app)

If we are not using Babel or Webpack, we won't have the import and export statement, we can use 'module.exports = googleSearch;' instead. To import it, we use 'const googleSearch = require('./script');'

Test asynchronous function
To test, we use expect.assertions([amount_of_test]), done() after jest test or return that async function
expect.assertions(number) verifies that a certain number of assertions are called during a test. This is often useful when testing asynchronous code, in order to make sure that assertions in a callback actually got called.
https://github.com/sapegin/jest-cheat-sheet
Mocks and Spies: With Mock we can fake a function and just pretend to have it running. So that we can use this mock to let us spy on the behavior of a function that is called indirectly by some other code, rather than just testing the output and waiting for the asynchronous code to complete
		
Test component: Enzyme, React Testing Library
Enzyme
shallow() help to test all basic JSX element of a component (ex: <div>, <h1>, <h2>...), it won't test the children component (ex: <Card>, <Header>...)
mount() help full DOM rendering (rarely use)
Snapshot in Jest: .toMatchSnapshot() take a picture of component and store it in __snapshots__ folder (we should push this folder to github), if we make some changes in a snapshoted component, the test result will be failed and Jest will show us these differences in console window. To update a new snapshot for that component, in console window, press 'u'.
run 'npm test -- --coverage' to show the test report, test coverage of the project.
To test a component's state, we can use shallow(<Component_name>).state() to access its state
To test a component's props, we can use shallow(<Component_name>).props() to access its props
To test a component's method, we can use shallow(<Component_name>).instance().[method_name()] to access its method
To test api request, we can use these libraries: nock or super-test
beforeEach() run before every test time

Testing reducers: reducer is just a simple function, so that we can use like: expect(function_call()).toEqual();
Testing actions: 
with normal action function return an action, it is a normal function, so that we can test using: expect(function_call()).toEqual();
when action combine with redux-thunk, to test actions we can use: npm i --save-dev redux-mock-store

-----------------------------------------------------------------
Webpack and Babel

Webpack help to convert code into the version that browser can understand
To add webpack to our project, we do this: 
	yarn add webpack webpack-cli. 
	Create file 'webpack.config.js'. We have to use ES5 syntax in this file. When we run project, webpack will find this file automatically
	in package.json, 'scripts' section, we add '"build": "webpack --mode production"'
	modify webpack.config.js
Babel is the library that helps transport JavaScript and JSX down into older versions of JavaScript.
To add Babel to our project, we do this: 
	yarn add @babel/core @babel/preset-env @babel/preset-react babel-loader
	add '.babelrc' file to project folder: this file tells Babble what it needs to transpire down to
To handle CSS file, we do this:
	yarn add style-loader css-loader
	// style loader is what allows it to convert different types of style files
	// CSS loader is what allows the CSS to be read by our JavaScript files
To handle HTMl file, we do this:
	yarn add html-loader html-webpack-plugin
	HTML loader is the thing that lets us read our HTML file inside of our React application.
	Webpack plugin is what allows us to actually place the output somewhere. So it's going to build all of our HTML files and create efficient HTML bundles with the JavaScript for each page.

-------------------------------------------------------------------
GatsbyJS

Client side rendering: react code -> browser engine -> generate HTML
Server side rendering: react code -> backend server -> generate HTML
	If you have a website that is performing slowly and can exceed the amount of power that our browser engine has, then you want to use something like NextJS. It is a framework using server side rendering and allows you to build a really robust and large website that might end up having really complex logic to build out your views
Static site generator:
Client side rendering and Server side rendering is live generated or dynamically generated, meaning that we directly generate the HTML whenever the browser navigates to different routes
Static site generator means all of the code that builds to the HTML pages that end up comprising our application is all done at the build step. GatsbyJS is good for building static websites that generally don't need to dynamically change the views that often. This is actually exactly what we need for a blog website where much of the actual content is already predetermined. It's already written

npx gatsby new [project_name]
npm run develop -> after this, it will give us 2 routes: localhost:8000 (the actual website) and localhost:8000/___graphql (a playground shows us all of the queries we're able to make inside of GraphQL)

if you add a file named abc.js to 'pages' folder and export default a component from that file, Gatsby will generate automatically the route '/abc' to access that component

you need to make sure everything needed for all the pages (child component, css...) is ready at build step

Markdown file
A markdown file start with a '-- -' pair which is called the front matter
ex:
-- -
title: "My blog"
date: "2022-01-01"
description: "ABCABC"
-- -

At the end, markdown will be compiled to HTML

if a project has yarn.lock file, that mean that project using 'yarn add' to install package and vice versa, if a project has package.lock file, that mean that project using 'npm i' to install package

yarn add gatsby-transformer-remark
Gatsby transform remark is a plugin that allows us to convert our markdown files into data and HTML. The front matter portion of our markdown will get converted into a data object that we can access, and everything in the actual markdown itself will be converted into HTML that we can use to build the pages that we want inside of our application.

After add new config to the config file, go to /___graphql and press F5 we will see that new config appear
'excerpt' will give back a little snipper of the body what we are trying to show
